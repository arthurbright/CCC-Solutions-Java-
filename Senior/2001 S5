import java.io.*;
import java.util.*;

public class Solution {

	public static String[] A;
	public static String[] B;
	public static int n;
	public static int m;
	public static int[] moveArray;
	public static int finalLength;

	public static void main(String[] args) throws IOException
	{
		Scanner sc = new Scanner(System.in);
		
		//getting m and n
		m = sc.nextInt();
		n = sc.nextInt();
		sc.nextLine();
		
		//creating the arrays of the strings
		A = new String[n];
		B = new String[n];
		
		//this array will track which string used
		moveArray = new int[41];
		Arrays.fill(moveArray, -1);
		
		for(int i = 0; i < n; i ++)
		{
			A[i] = sc.nextLine();
		}
		for(int i = 0; i < n; i ++)
		{
			B[i] = sc.nextLine();
		}
		
		
		if(possible("", "", 0))
		{
			System.out.println(finalLength + 1);
			for(int i = 0; i < finalLength + 1; i ++)
			{
				System.out.println(moveArray[i] + 1);
			}
		}
		else
		{
			System.out.println("No solution.");
		}
		
		
	}
	
	//recursive solving function
	public static boolean possible(String a, String b, int length)
	{
		//if length too long
		if(length > m)
		{
			return false;
		}
		//if conditions met
		else if(a.contentEquals(b) && length != 0)
		{
			return true;
		}
		//if strings dont even start the same way
		else if(!sameStart(a, b))
		{
			return false;
		}
		else
		{
			int i = 0;
			boolean foundAns = false;
			while(i < n && !foundAns)
			{
				finalLength = length;
				moveArray[length] = i;
				foundAns = possible(a + A[i], b + B[i], length + 1);
				i += 1;
			}
			return foundAns;
		}
		
	}
	
	//helper function that checks if two strings can even satisfy the requirements
	public static boolean sameStart(String a, String b)
	{
		return a.startsWith(b) || b.startsWith(a);
	}
	
	


}
