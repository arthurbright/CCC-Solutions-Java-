#include <iostream>
#include <cmath>
#include <map>
#include <vector>
#include <algorithm>
#include <queue>
#include <stack>
#include <list>
#include <set>

using namespace std;


int main()
{
    bool graph [50][50];
    for(int i = 0; i < 50; i ++)
    {
        for(int k = 0; k < 50; k ++)
        {
            graph[i][k] = false;
        }
    }
    //INITIAL VALUES
    graph[1][6] = true;
    graph[6][1] = true;

    graph[2][6] = true;
    graph[6][2] = true;

    graph[3][6] = true;
    graph[6][3] = true;
    graph[3][4] = true;
    graph[4][3] = true;
    graph[3][5] = true;
    graph[5][3] = true;
    graph[3][15] = true;
    graph[15][3] = true;

    graph[4][6] = true;
    graph[6][4] = true;
    graph[4][5] = true;
    graph[5][4] = true;

    graph[5][6] = true;
    graph[6][5] = true;

    graph[6][7] = true;
    graph[7][6] = true;

    graph[7][8] = true;
    graph[8][7] = true;


    graph[8][9] = true;
    graph[9][8] = true;

    graph[9][10] = true;
    graph[10][9] = true;
    graph[9][12] = true;
    graph[12][9] = true;

    graph[10][11] = true;
    graph[11][10] = true;

    graph[11][12] = true;
    graph[12][11] = true;

    graph[12][13] = true;
    graph[13][12] = true;

    graph[13][14] = true;
    graph[14][13] = true;
    graph[13][15] = true;
    graph[15][13] = true;

    graph[16][17] = true;
    graph[17][16] = true;
    graph[16][18] = true;
    graph[18][16] = true;

    graph[17][18] = true;
    graph[18][17] = true;

    char c;
    int a, b;


    while(true)
    {
        cin >> c;
        if(c == 'q')
        {
            break;
        }
        else if(c == 'i')
        {
            cin >> a;
            cin >> b;
            graph[a][b] = true;
            graph[b][a] = true;
        }
        else if(c == 'd')
        {
            cin >> a;
            cin >> b;
            graph[a][b] = false;
            graph[b][a] = false;
        }
        else if(c == 'n')
        {
            cin >> a;

            int acc = 0;
            for(int i = 0; i < 50; i ++)
            {
                if(graph[a][i])
                {
                    acc += 1;
                }
            }
            cout << acc << endl;
        }
        else if(c == 'f')
        {
            cin >> a;
            set<int> friends;
            for(int i = 0; i < 50; i ++)
            {
                if(graph[a][i])
                {
                    for(int j = 0; j < 50; j ++)
                    {
                        if(graph[i][j])
                        {
                            friends.insert(j);
                        }
                    }
                }
            }

            //erase direct friends
            for(int i = 0; i < 50; i ++)
            {
                if(graph[a][i])
                {
                    friends.erase(i);
                }
            }

            //erase self
            friends.erase(a);

            cout << friends.size() << endl;


        }
        else if(c == 's')
        {
            //bfs
            cin >> a;
            cin >> b;

            int steps = 0;

            //visited array
            bool visited[50];
            for(int i = 0; i < 50; i ++)
            {
                visited[i] = false;
            }

            queue<int> next;
            next.push(a);
            visited[a] = true;

            int siz;
            int cur;

            while(!next.empty())
            {
                siz = next.size();
                steps ++;

                for(int i = 0; i < siz; i ++)
                {
                    cur = next.front();
                    next.pop();
                    for(int j = 0; j < 50; j ++)
                    {
                        if(graph[cur][j] && !visited[j])
                        {
                            visited[j] = true;
                            next.push(j);

                            //end condition
                            if(j == b)
                            {
                                cout << steps << endl;
                                goto finish;
                            }
                        }
                    }

                }
            }
            cout << "Not connected" << endl;
finish:
            cout << "";
        }
    }


}
